// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aci.apic.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ChildArgs extends com.pulumi.resources.ResourceArgs {

    public static final ChildArgs Empty = new ChildArgs();

    /**
     * Which class object is being created. (Make sure there is no colon in the classname)
     * 
     */
    @Import(name="class_name", required=true)
    private Output<String> class_name;

    /**
     * @return Which class object is being created. (Make sure there is no colon in the classname)
     * 
     */
    public Output<String> class_name() {
        return this.class_name;
    }

    /**
     * Map of key-value pairs those needed to be passed to the Model object as parameters. Make sure the key name matches the name with the object parameter in ACI.
     * 
     */
    @Import(name="content")
    private @Nullable Output<Map<String,String>> content;

    /**
     * @return Map of key-value pairs those needed to be passed to the Model object as parameters. Make sure the key name matches the name with the object parameter in ACI.
     * 
     */
    public Optional<Output<Map<String,String>>> content() {
        return Optional.ofNullable(this.content);
    }

    /**
     * Relative name of child object.
     * 
     */
    @Import(name="rn", required=true)
    private Output<String> rn;

    /**
     * @return Relative name of child object.
     * 
     */
    public Output<String> rn() {
        return this.rn;
    }

    private ChildArgs() {}

    private ChildArgs(ChildArgs $) {
        this.class_name = $.class_name;
        this.content = $.content;
        this.rn = $.rn;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ChildArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ChildArgs $;

        public Builder() {
            $ = new ChildArgs();
        }

        public Builder(ChildArgs defaults) {
            $ = new ChildArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param class_name Which class object is being created. (Make sure there is no colon in the classname)
         * 
         * @return builder
         * 
         */
        public Builder class_name(Output<String> class_name) {
            $.class_name = class_name;
            return this;
        }

        /**
         * @param class_name Which class object is being created. (Make sure there is no colon in the classname)
         * 
         * @return builder
         * 
         */
        public Builder class_name(String class_name) {
            return class_name(Output.of(class_name));
        }

        /**
         * @param content Map of key-value pairs those needed to be passed to the Model object as parameters. Make sure the key name matches the name with the object parameter in ACI.
         * 
         * @return builder
         * 
         */
        public Builder content(@Nullable Output<Map<String,String>> content) {
            $.content = content;
            return this;
        }

        /**
         * @param content Map of key-value pairs those needed to be passed to the Model object as parameters. Make sure the key name matches the name with the object parameter in ACI.
         * 
         * @return builder
         * 
         */
        public Builder content(Map<String,String> content) {
            return content(Output.of(content));
        }

        /**
         * @param rn Relative name of child object.
         * 
         * @return builder
         * 
         */
        public Builder rn(Output<String> rn) {
            $.rn = rn;
            return this;
        }

        /**
         * @param rn Relative name of child object.
         * 
         * @return builder
         * 
         */
        public Builder rn(String rn) {
            return rn(Output.of(rn));
        }

        public ChildArgs build() {
            $.class_name = Objects.requireNonNull($.class_name, "expected parameter 'class_name' to be non-null");
            $.rn = Objects.requireNonNull($.rn, "expected parameter 'rn' to be non-null");
            return $;
        }
    }

}

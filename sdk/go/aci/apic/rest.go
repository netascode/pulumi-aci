// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package apic

import (
	"context"
	"reflect"

	"errors"
	"github.com/netascode/pulumi-aci/sdk/go/aci/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages ACI Model Objects via REST API calls. This resource can only manage a single API object.
type Rest struct {
	pulumi.CustomResourceState

	// List of child objects to be created. Each child object must have a unique relative name.
	Children ChildArrayOutput `pulumi:"children"`
	// Which class object is being created. (Make sure there is no colon in the classname)
	Class_name pulumi.StringOutput `pulumi:"class_name"`
	// Map of key-value pairs those needed to be passed to the Model object as parameters. Make sure the key name matches the name with the object parameter in ACI.
	Content pulumi.StringMapOutput `pulumi:"content"`
	// Distinguished name of object being managed including its relative name, e.g. uni/tn-EXAMPLE_TENANT.
	Dn pulumi.StringOutput `pulumi:"dn"`
}

// NewRest registers a new resource with the given unique name, arguments, and options.
func NewRest(ctx *pulumi.Context,
	name string, args *RestArgs, opts ...pulumi.ResourceOption) (*Rest, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Class_name == nil {
		return nil, errors.New("invalid value for required argument 'Class_name'")
	}
	if args.Dn == nil {
		return nil, errors.New("invalid value for required argument 'Dn'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Rest
	err := ctx.RegisterResource("aci:apic:Rest", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRest gets an existing Rest resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRest(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RestState, opts ...pulumi.ResourceOption) (*Rest, error) {
	var resource Rest
	err := ctx.ReadResource("aci:apic:Rest", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Rest resources.
type restState struct {
}

type RestState struct {
}

func (RestState) ElementType() reflect.Type {
	return reflect.TypeOf((*restState)(nil)).Elem()
}

type restArgs struct {
	// List of child objects to be created. Each child object must have a unique relative name.
	Children []Child `pulumi:"children"`
	// Which class object is being created. (Make sure there is no colon in the classname)
	Class_name string `pulumi:"class_name"`
	// Map of key-value pairs those needed to be passed to the Model object as parameters. Make sure the key name matches the name with the object parameter in ACI.
	Content map[string]string `pulumi:"content"`
	// Distinguished name of object being managed including its relative name, e.g. uni/tn-EXAMPLE_TENANT.
	Dn string `pulumi:"dn"`
}

// The set of arguments for constructing a Rest resource.
type RestArgs struct {
	// List of child objects to be created. Each child object must have a unique relative name.
	Children ChildArrayInput
	// Which class object is being created. (Make sure there is no colon in the classname)
	Class_name pulumi.StringInput
	// Map of key-value pairs those needed to be passed to the Model object as parameters. Make sure the key name matches the name with the object parameter in ACI.
	Content pulumi.StringMapInput
	// Distinguished name of object being managed including its relative name, e.g. uni/tn-EXAMPLE_TENANT.
	Dn pulumi.StringInput
}

func (RestArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*restArgs)(nil)).Elem()
}

type RestInput interface {
	pulumi.Input

	ToRestOutput() RestOutput
	ToRestOutputWithContext(ctx context.Context) RestOutput
}

func (*Rest) ElementType() reflect.Type {
	return reflect.TypeOf((**Rest)(nil)).Elem()
}

func (i *Rest) ToRestOutput() RestOutput {
	return i.ToRestOutputWithContext(context.Background())
}

func (i *Rest) ToRestOutputWithContext(ctx context.Context) RestOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RestOutput)
}

// RestArrayInput is an input type that accepts RestArray and RestArrayOutput values.
// You can construct a concrete instance of `RestArrayInput` via:
//
//	RestArray{ RestArgs{...} }
type RestArrayInput interface {
	pulumi.Input

	ToRestArrayOutput() RestArrayOutput
	ToRestArrayOutputWithContext(context.Context) RestArrayOutput
}

type RestArray []RestInput

func (RestArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Rest)(nil)).Elem()
}

func (i RestArray) ToRestArrayOutput() RestArrayOutput {
	return i.ToRestArrayOutputWithContext(context.Background())
}

func (i RestArray) ToRestArrayOutputWithContext(ctx context.Context) RestArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RestArrayOutput)
}

// RestMapInput is an input type that accepts RestMap and RestMapOutput values.
// You can construct a concrete instance of `RestMapInput` via:
//
//	RestMap{ "key": RestArgs{...} }
type RestMapInput interface {
	pulumi.Input

	ToRestMapOutput() RestMapOutput
	ToRestMapOutputWithContext(context.Context) RestMapOutput
}

type RestMap map[string]RestInput

func (RestMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Rest)(nil)).Elem()
}

func (i RestMap) ToRestMapOutput() RestMapOutput {
	return i.ToRestMapOutputWithContext(context.Background())
}

func (i RestMap) ToRestMapOutputWithContext(ctx context.Context) RestMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RestMapOutput)
}

type RestOutput struct{ *pulumi.OutputState }

func (RestOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Rest)(nil)).Elem()
}

func (o RestOutput) ToRestOutput() RestOutput {
	return o
}

func (o RestOutput) ToRestOutputWithContext(ctx context.Context) RestOutput {
	return o
}

// List of child objects to be created. Each child object must have a unique relative name.
func (o RestOutput) Children() ChildArrayOutput {
	return o.ApplyT(func(v *Rest) ChildArrayOutput { return v.Children }).(ChildArrayOutput)
}

// Which class object is being created. (Make sure there is no colon in the classname)
func (o RestOutput) Class_name() pulumi.StringOutput {
	return o.ApplyT(func(v *Rest) pulumi.StringOutput { return v.Class_name }).(pulumi.StringOutput)
}

// Map of key-value pairs those needed to be passed to the Model object as parameters. Make sure the key name matches the name with the object parameter in ACI.
func (o RestOutput) Content() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Rest) pulumi.StringMapOutput { return v.Content }).(pulumi.StringMapOutput)
}

// Distinguished name of object being managed including its relative name, e.g. uni/tn-EXAMPLE_TENANT.
func (o RestOutput) Dn() pulumi.StringOutput {
	return o.ApplyT(func(v *Rest) pulumi.StringOutput { return v.Dn }).(pulumi.StringOutput)
}

type RestArrayOutput struct{ *pulumi.OutputState }

func (RestArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Rest)(nil)).Elem()
}

func (o RestArrayOutput) ToRestArrayOutput() RestArrayOutput {
	return o
}

func (o RestArrayOutput) ToRestArrayOutputWithContext(ctx context.Context) RestArrayOutput {
	return o
}

func (o RestArrayOutput) Index(i pulumi.IntInput) RestOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Rest {
		return vs[0].([]*Rest)[vs[1].(int)]
	}).(RestOutput)
}

type RestMapOutput struct{ *pulumi.OutputState }

func (RestMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Rest)(nil)).Elem()
}

func (o RestMapOutput) ToRestMapOutput() RestMapOutput {
	return o
}

func (o RestMapOutput) ToRestMapOutputWithContext(ctx context.Context) RestMapOutput {
	return o
}

func (o RestMapOutput) MapIndex(k pulumi.StringInput) RestOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Rest {
		return vs[0].(map[string]*Rest)[vs[1].(string)]
	}).(RestOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RestInput)(nil)).Elem(), &Rest{})
	pulumi.RegisterInputType(reflect.TypeOf((*RestArrayInput)(nil)).Elem(), RestArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RestMapInput)(nil)).Elem(), RestMap{})
	pulumi.RegisterOutputType(RestOutput{})
	pulumi.RegisterOutputType(RestArrayOutput{})
	pulumi.RegisterOutputType(RestMapOutput{})
}

// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package apic

import (
	"context"
	"reflect"

	"github.com/netascode/pulumi-aci/sdk/go/aci/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = internal.GetEnvOrDefault

type Child struct {
	// Which class object is being created. (Make sure there is no colon in the classname)
	Class_name string `pulumi:"class_name"`
	// Map of key-value pairs those needed to be passed to the Model object as parameters. Make sure the key name matches the name with the object parameter in ACI.
	Content map[string]string `pulumi:"content"`
	// Relative name of child object.
	Rn string `pulumi:"rn"`
}

// ChildInput is an input type that accepts ChildArgs and ChildOutput values.
// You can construct a concrete instance of `ChildInput` via:
//
//	ChildArgs{...}
type ChildInput interface {
	pulumi.Input

	ToChildOutput() ChildOutput
	ToChildOutputWithContext(context.Context) ChildOutput
}

type ChildArgs struct {
	// Which class object is being created. (Make sure there is no colon in the classname)
	Class_name pulumi.StringInput `pulumi:"class_name"`
	// Map of key-value pairs those needed to be passed to the Model object as parameters. Make sure the key name matches the name with the object parameter in ACI.
	Content pulumi.StringMapInput `pulumi:"content"`
	// Relative name of child object.
	Rn pulumi.StringInput `pulumi:"rn"`
}

func (ChildArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Child)(nil)).Elem()
}

func (i ChildArgs) ToChildOutput() ChildOutput {
	return i.ToChildOutputWithContext(context.Background())
}

func (i ChildArgs) ToChildOutputWithContext(ctx context.Context) ChildOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ChildOutput)
}

// ChildArrayInput is an input type that accepts ChildArray and ChildArrayOutput values.
// You can construct a concrete instance of `ChildArrayInput` via:
//
//	ChildArray{ ChildArgs{...} }
type ChildArrayInput interface {
	pulumi.Input

	ToChildArrayOutput() ChildArrayOutput
	ToChildArrayOutputWithContext(context.Context) ChildArrayOutput
}

type ChildArray []ChildInput

func (ChildArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Child)(nil)).Elem()
}

func (i ChildArray) ToChildArrayOutput() ChildArrayOutput {
	return i.ToChildArrayOutputWithContext(context.Background())
}

func (i ChildArray) ToChildArrayOutputWithContext(ctx context.Context) ChildArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ChildArrayOutput)
}

type ChildOutput struct{ *pulumi.OutputState }

func (ChildOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Child)(nil)).Elem()
}

func (o ChildOutput) ToChildOutput() ChildOutput {
	return o
}

func (o ChildOutput) ToChildOutputWithContext(ctx context.Context) ChildOutput {
	return o
}

// Which class object is being created. (Make sure there is no colon in the classname)
func (o ChildOutput) Class_name() pulumi.StringOutput {
	return o.ApplyT(func(v Child) string { return v.Class_name }).(pulumi.StringOutput)
}

// Map of key-value pairs those needed to be passed to the Model object as parameters. Make sure the key name matches the name with the object parameter in ACI.
func (o ChildOutput) Content() pulumi.StringMapOutput {
	return o.ApplyT(func(v Child) map[string]string { return v.Content }).(pulumi.StringMapOutput)
}

// Relative name of child object.
func (o ChildOutput) Rn() pulumi.StringOutput {
	return o.ApplyT(func(v Child) string { return v.Rn }).(pulumi.StringOutput)
}

type ChildArrayOutput struct{ *pulumi.OutputState }

func (ChildArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Child)(nil)).Elem()
}

func (o ChildArrayOutput) ToChildArrayOutput() ChildArrayOutput {
	return o
}

func (o ChildArrayOutput) ToChildArrayOutputWithContext(ctx context.Context) ChildArrayOutput {
	return o
}

func (o ChildArrayOutput) Index(i pulumi.IntInput) ChildOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Child {
		return vs[0].([]Child)[vs[1].(int)]
	}).(ChildOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ChildInput)(nil)).Elem(), ChildArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ChildArrayInput)(nil)).Elem(), ChildArray{})
	pulumi.RegisterOutputType(ChildOutput{})
	pulumi.RegisterOutputType(ChildArrayOutput{})
}
